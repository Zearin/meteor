"use strict";(self.webpackChunkmeteor=self.webpackChunkmeteor||[]).push([[362],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),d=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=d(a),u=n,f=p["".concat(l,".").concat(u)]||p[u]||c[u]||o;return a?r.createElement(f,s(s({ref:t},m),{},{components:a})):r.createElement(f,s({ref:t},m))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var d=2;d<o;d++)s[d]=a[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},2038:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=a(7462),n=(a(7294),a(3905));const o={},s="Meteor Metadata Model",i={unversionedId:"reference/metadata_models",id:"reference/metadata_models",title:"Meteor Metadata Model",description:"We have a set of defined metadata models which define the structure of metadata that meteor will yield.",source:"@site/docs/reference/metadata_models.md",sourceDirName:"reference",slug:"/reference/metadata_models",permalink:"/meteor/docs/reference/metadata_models",draft:!1,editUrl:"https://github.com/odpf/meteor/edit/master/docs/docs/reference/metadata_models.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Configuration",permalink:"/meteor/docs/reference/configuration"},next:{title:"Extractors",permalink:"/meteor/docs/reference/extractors"}},l={},d=[{value:"Usage",id:"usage",level:2}],m={toc:d};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"meteor-metadata-model"},"Meteor Metadata Model"),(0,n.kt)("p",null,"We have a set of defined metadata models which define the structure of metadata that meteor will yield.\nTo visit the metadata models being used by different extractors please visit ",(0,n.kt)("a",{parentName:"p",href:"/meteor/docs/reference/extractors"},"here"),".\nWe are currently using the following metadata models:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://github.com/odpf/proton/blob/main/odpf/assets/bucket.proto"},"Bucket"),":\nUsed for metadata being extracted from buckets. Buckets are the basic containers in google cloud services, or Amazon S3, etc that are used fot data storage, and quite popular because of their features of access management, aggregation of usage and services and ease of configurations.\nCurrently, Meteor provides a metadata extractor for the buckets mentioned ",(0,n.kt)("a",{parentName:"p",href:"/meteor/docs/reference/extractors"},"here"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://github.com/odpf/proton/blob/main/odpf/assets/dashboard.proto"},"Dashboard"),":\nDashboards are an essential part of data analysis and are used to track, analyze and visualize.\nThese Dashboard metadata model includes some basic fields like ",(0,n.kt)("inlineCode",{parentName:"p"},"urn")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"source"),", etc and a list of ",(0,n.kt)("inlineCode",{parentName:"p"},"Chart"),".\nThere are multiple dashboards that are essential for Data Analysis such as metabase, grafana, tableau, etc.\nPlease refer to the list of Dashboards meteor currently supports ",(0,n.kt)("a",{parentName:"p",href:"/meteor/docs/reference/extractors"},"here"),".")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://github.com/odpf/proton/blob/main/odpf/assets/chart.proto"},"Chart"),":\nCharts are included in all the Dashboard and are the result of certain queries in a Dashboard.\nInformation about them includes the information of the query and few similar details.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://github.com/odpf/proton/blob/main/odpf/assets/user.proto"},"User"),":\nThis metadata model is used for defining the output of extraction on Users accounts.\nSome of these sources can be GitHub, Workday, Google Suite, LDAP.\nPlease refer to the list of user meteor currently supports ",(0,n.kt)("a",{parentName:"p",href:"/meteor/docs/reference/extractors"},"here"),".")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://github.com/odpf/proton/blob/main/odpf/assets/table.proto"},"Table"),":\nThis metadata model is being used by extractors based around ",(0,n.kt)("inlineCode",{parentName:"p"},"databases")," or for the ones that store data in tabular format.\nIt contains various fields that include ",(0,n.kt)("inlineCode",{parentName:"p"},"schema")," of the table and other access related information.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://github.com/odpf/proton/blob/main/odpf/assets/job.proto"},"Job"),":\nMost of the data is being streamed as queues by kafka or other stack in DE pipeline.\nAnd hence Job is a metadata model built for this purpose."))),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Proto")," has been used to define these metadata models.\nTo check their implementation please refer ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/odpf/proton/tree/main/odpf/assets"},"here"),"."),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-golang"},'import(\n"github.com/odpf/meteor/models/odpf/assets/v1beta1"\n"github.com/odpf/meteor/models/odpf/assets/facets/v1beta1"\n)\n\nfunc main(){\n    // result is a var of data type of assetsv1beta1.Table one of our metadata model\n    result := &assetsv1beta1.Table{\n        // assigining value to metadata model\n        Urn:  fmt.Sprintf("%s.%s", dbName, tableName),\n        Name: tableName,\n    }\n\n    // using column facet to add metadata info of schema\n\n    var columns []*facetsv1beta1.Column\n    columns = append(columns, &facetsv1beta1.Column{\n            Name:       "column_name",\n            DataType:   "varchar",\n            IsNullable: true,\n            Length:     256,\n        })\n    result.Schema = &facetsv1beta1.Columns{\n        Columns: columns,\n    }\n}\n')))}c.isMDXComponent=!0}}]);